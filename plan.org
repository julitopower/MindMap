* Features
** Read org-syntax
** Output png
** Nodes have shape, color
** Edges have line style, color
** Project generates a library
** Project generates an application
** Generate debian package
** Publish to conda
** Publish to apt
* References
- [[https://www.graphviz.org/pdf/libguide.pdf][Using Graphviz as a Library]]
- [[https://www.gnu.org/software/bison/manual/bison.pdf][Bison manual]]
- [[http://westes.github.io/flex/manual/][Flex manual]]
* task breakdown
** TODO Setup project structure
   CLOSED: [2021-01-09 Sat 12:46]
   START: <2021-01-07 Thu>
*** DONE Create github project
    START: <2021-01-07 Thu>
    CLOSED: [2021-01-07 Thu 07:13]
*** DONE Setup CMake structure
    CLOSED: [2021-01-09 Sat 12:46]
    START: <2021-01-07 Thu>
*** DONE Decide on testing framework
    CLOSED: [2021-01-08 Fri 07:45]

We have decided to use GTest. Its integration with CMake is fantastic, and it is very easy to use.
*** TODO Enable CI/CD in github
** DONE Mp: Render dot file + debian package
   CLOSED: [2021-01-10 Sun 19:24]
   START: <2021-01-09 Sat>
This is a preliminary task intended to facilitate learning how to use GraphViz as a library. I'll manually write a dot file and then call a function that will render it to an image. This will be coded as a library function and a test. We have also included CMake configuration to generate a debian package.

*** DONE Render dot file to png
    CLOSED: [2021-01-10 Sun 19:28]
*** DONE Generate debian package via CMake
    CLOSED: [2021-01-10 Sun 19:29]
** INPROGRESS M0: MindMap language specification
Use a formal grammar. The actual design of the AST we will use for code generation belongs in M1. We begin with a C based scanner and parser, but may need to convert it to C++ so that we can generate the AST in a simpler manner.
*** DONE Build simple c-Flex scanner
    CLOSED: [2021-01-12 Tue 20:41]
*** INPROGRESS Build simple c-Bison parser
*** Put them together in a validate utils function
The validate will simply go through the input a check if it complies with the grammar
** M1: Read graph specification into memory
*** TODO Design internal representation
*** TODO Implement parser
** M2: Output png
*** Integrate graphvizlib
